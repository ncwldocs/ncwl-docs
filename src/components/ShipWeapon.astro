---
import { fetchYAML } from '@lib/fetch-yaml.js'
import fs from 'fs'

const { weaponID } = Astro.props;

const cannons = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Structures/cannons.yml');
const turrets = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Structures/turrets.yml');

const projectilesShells = await fetchYAML('Resources/Prototypes/_Crescent/Entities/SpaceArtillery/shells.yml');
const projectilesCannonAmmo = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Objects/Ammunition/cannonammo.yml');
const projectilesOther = await fetchYAML('Resources/Prototypes/Entities/Objects/Weapons/Guns/Projectiles/projectiles.yml');


// Manually defined in a JSON file because tracing back through various cartridges and magazines programmatically is nightmarish.
const shipWeaponProjectiles = JSON.parse(fs.readFileSync(`./src/assets/data/ShipWeaponProjectiles.json`, 'utf8'));

// If an entity doesn't have a given component, search its parents.
function recursiveComponentSearch(entity: object, entityFile: object, componentType: string) {
    let result;
    let currentSearch = entity;
    while (!result) {
        if ('components' in currentSearch && currentSearch.components.find(component => component.type == componentType)) {
            result = currentSearch.components.find(component => component.type == componentType);
        } else {
            currentSearch = entityFile.find(entity => entity.id == currentSearch.parent);
        }
    }

    return result;
}

// console.log(weaponID);
const weaponFile = cannons.find(weapon => weapon.id == weaponID) ? cannons : turrets;
// console.log(weaponFile);
const weaponEntry = weaponFile.find(weapon => weapon.id == weaponID);
// console.log(weaponEntry);
const weaponName = weaponEntry.name;
const weaponSpeed = recursiveComponentSearch(weaponEntry, weaponFile, "Gun").projectileSpeed;

console.log(shipWeaponProjectiles[weaponID]);
console.log(shipWeaponProjectiles[weaponID].projectile);

const projectileType = shipWeaponProjectiles[weaponID].projectile;
const projectileFile = projectilesShells.find(projectile => projectile.id == projectileType) ? projectilesShells
                     : projectilesCannonAmmo.find(projectile => projectile.id == projectileType) ? projectilesCannonAmmo 
                     : projectilesOther;
const projectileEntry = projectileFile.find(projectile => projectile.id == projectileType);
const projectileLifetime = recursiveComponentSearch(projectileEntry, projectileFile, "TimedDespawn").lifetime;

const weaponRange = weaponSpeed * projectileLifetime;
---
<b>{weaponName}</b> <sup><i>{weaponRange}m</i></sup>