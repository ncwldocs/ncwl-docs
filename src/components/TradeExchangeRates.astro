---
import fs from 'fs'
import YAML from 'yaml'


// Utility function to translate "SpaceCash2000" into simply "2000".
function getSpaceCash(string: string) {
    const splitString = string.split(/(\d+)/, 2);
    return splitString[1];
}

const YAMLFolder = './src/assets/data/Hullrot-YAML-Prototypes';

// YML file containing starting inventory of trade dispensaries.
const cargoDispensersFile = fs.readFileSync(`${YAMLFolder}/_Crescent/Catalog/VendingMachines/Inventories/cargodispensaries.yml`, 'utf8');
const cargoDispensers = YAML.parse(cargoDispensersFile, { logLevel: 'error' });

// YML file containing Deed Console and cargo Turn-In Chutes. 
const tradeDispensersFile = fs.readFileSync(`${YAMLFolder}/_Crescent/Entities/Structures/dispensers.yml`, 'utf8');
const tradeDispensers = YAML.parse(tradeDispensersFile, { logLevel: 'error' });

// YML file containing trade goods.
const tradeGoodsFile = fs.readFileSync(`${YAMLFolder}/_Crescent/Entities/Objects/Misc/trade.yml`, 'utf8');
const tradeGoods = YAML.parse(tradeGoodsFile, { logLevel: 'error' });

// Find the NCWL dispensary's starting inventory.
const dispensaryNCWL = cargoDispensers.find(dispenser => dispenser.id == "NovaBelraskaDispensary");

// Find the Deed Console and each station's cargo turn-in chute.
const deedConsole = tradeDispensers.find(dispenser => dispenser.id == "DeedConsole");
const tradeDeedValues = deedConsole.components.find(component => component.type == "Dispenser").inventory;

const cargoChuteNCWL = tradeDispensers.find(dispenser => dispenser.id == "NovaBalreskaCargoChute");
const cargoChuteNCWLInventory = cargoChuteNCWL.components.find(component => component.type == "Dispenser").inventory;

const cargoChuteTFSC = tradeDispensers.find(dispenser => dispenser.id == "GrinningJackalCargoChute");
const cargoChuteTFSCInventory = cargoChuteTFSC.components.find(component => component.type == "Dispenser").inventory;

const cargoChuteDSM = tradeDispensers.find(dispenser => dispenser.id == "CountsmanCargoChute");
const cargoChuteDSMInventory = cargoChuteDSM.components.find(component => component.type == "Dispenser").inventory;

// Generate a list of trade goods, their prices, and their sell values.
const tradeGoodsList = [];

for (const t of tradeGoods) {
    if (t.id.startsWith("TradeGood")) {
        const tradeGood = {};

        tradeGood.name = t.name;
        tradeGood.price = "";
        tradeGood.sellValueTFSC = "";
        tradeGood.sellValueDSM = "";
        tradeGood.sellValueNCWL = "";

        // Get price if available from NCWL dispensary.
        if (Object.keys(dispensaryNCWL.startingInventory).includes(t.id)) {
            tradeGood.price = t.components.find(component => component.type == "StaticPrice").price;
        }

        // Get redemption value from turn-in chutes.
        if (Object.keys(cargoChuteTFSCInventory).includes(t.id)) {
            tradeGood.sellValueTFSC = getSpaceCash(tradeDeedValues[cargoChuteTFSCInventory[t.id]]);
        }

        if (Object.keys(cargoChuteDSMInventory).includes(t.id)) {
            tradeGood.sellValueDSM = getSpaceCash(tradeDeedValues[cargoChuteDSMInventory[t.id]]);
        }

        if (Object.keys(cargoChuteNCWLInventory).includes(t.id)) {
            tradeGood.sellValueNCWL = getSpaceCash(tradeDeedValues[cargoChuteNCWLInventory[t.id]]);
        }
        
        // Only add to list if the trade good is actually redeemable somewhere.
        if (tradeGood.sellValueTFSC || tradeGood.sellValueDSM || tradeGood.sellValueNCWL) {
            tradeGoodsList.push(tradeGood);
        }

    }
}


---
<table>
    <tr>
        <th>Trade Good</th>
        <th>Purchase Cost</th>
        <th>Freeport</th>
        <th>Kal Surezai</th>
        <th>Port Vladzena</th>
    </tr>
    {tradeGoodsList.map((tradeGood) => 
    <tr>
        <td>{tradeGood.name}</td>
        <td>{tradeGood.price}</td>
        <td>{tradeGood.sellValueTFSC}</td>
        <td>{tradeGood.sellValueDSM}</td>
        <td>{tradeGood.sellValueNCWL}</td>
    </tr>
    )}
</table>